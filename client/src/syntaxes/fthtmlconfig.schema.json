{
  "title": "JSON schema for the ftHTML configuration file",
  "$schema": "http://json-schema.org/draft-07/schema",
  "additionalProperties": false,
  "definitions": {
    "string_nonempty": {
      "type": "string",
      "default": "",
      "minLength": 1,
      "pattern": "^([^\\s].*[^\\s]*)$"
    }
  },
  "properties": {
    "extend" : {
      "description": "Extend other local fthtmlconfig files. Properties cascade, and can be overwritten at runtime or in other fthtmlconfig descendant files. Supported properties that extend are importDir, jsonDir, exportDir, globalvars, globalTinyTemplates, excluded",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/string_nonempty"
      }
    },
    "excluded": {
      "description": "These are relative to the rootDir property. If the rootDir property is omitted, the workspace root path will be used. If no directories are exlcuded, the compiler will search for all ftHTML files in the directory to be coverted. By default, \"tests\" and \"node_modules\" directories are excluded. This property can be extended",
      "type": "array",
      "uniqueItems": true,
      "default": [
        "**/imports/**"
      ],
      "items": {
        "$ref": "#/definitions/string_nonempty"
      }
    },
    "importDir": {
      "allOf": [
        {
          "$ref": "#/definitions/string_nonempty"
        },
        {
          "description": "Default import directory for import statements. When this is set you will not have to type the directory to the import statements, just the filepath relative to the importDir. This is not relative to the rootDir property, it should be assumed this is relative to the workspace root path. This property can be extended",
          "default": "./.fthtml/imports",
          "examples": [
            "root/.fthtml/imports"
          ]
        }
      ]
    },
    "jsonDir": {
      "allOf": [
        {
          "$ref": "#/definitions/string_nonempty"
        },
        {
          "description": "Default json file directory for json binding. When this is set you will not have to type the directory to the json statements, just the filepath relative to the jsonDir. This is not relative to the rootDir property, it should be assumed this is relative to the workspace root path. This property can be extended",
          "default": "./.fthtml/json",
          "examples": [
            "root/.fthtml/json"
          ]
        }
      ]
    },
    "exportDir": {
      "allOf": [
        {
          "$ref": "#/definitions/string_nonempty"
        },
        {
          "description": "Sets the default directory of where you want converted files to save to. This is not relative to the rootDir property, it should be assumed this is relative to the workspace root path. This property can be extended",
          "default": "./www",
          "examples": [
            "root/www/"
          ]
        }
      ]
    },
    "rootDir": {
      "allOf": [
        {
          "$ref": "#/definitions/string_nonempty"
        },
        {
          "description": "When this is set the compilier will consider this the root folder for ftHTML files and only look here when converting. Assume this directory is relative to the workspace root path. This property can be extended",
          "default": "./.fthtml",
          "examples": [
            "root/.fthtml"
          ]
        }
      ]
    },
    "keepTreeStructure": {
      "description": "Keep tree structure of your solution explorer when converting ftHTML files to the exportDir destination.",
      "type": "boolean",
      "default": true,
      "enum": [
        true,
        false
      ]
    },
    "prettify": {
      "description": "By default, ftHTML is interperted and exported compressed (minified). This configuartion ensures the HTML output is beautified.",
      "type": "boolean",
      "default": false,
      "enum": [
        true,
        false
      ]
    },
    "globalvars": {
      "description": "This allows you to quickly call and reference variables in any of your .fthtml files without the need to declare or assign them in that respective file. The naming conventions follow regular variable naming conventions and can not be reserved words. This property can be extended",
      "type": "object",
      "patternProperties": {
        "^[\\w-]+$": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "globalTinyTemplates" : {
      "description": "This allows you to quickly call and reference custom element names that are aliases to a specific markup. The naming conventions follow regular variable naming convertions. This property can be extended. This property supports ftHTML syntax for values",
      "examples": [
        {
          "shell" : "code(.code-inline data-lang=shell)"
        },
        {
          "hyperlink" : "<a href=\"${val}\" target=\"_blank\">${val}</a>"
        }
      ],
      "type": "object",
      "patternProperties": {
        "^[\\w-]+$": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}